// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExerciseType {
  EXERCISE
  COMPLEX
}

model Exercise {
  id               String            @id @default(cuid())
  name             String            @unique
  type             ExerciseType
  subExercises     String? // JSON array of exercise IDs for complex types
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  workoutExercises WorkoutExercise[]
}

model Workout {
  id        String            @id @default(cuid())
  date      DateTime
  duration  Int? // Duration in minutes
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  exercises WorkoutExercise[]
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String?
  templateId String?
  exerciseId String
  sets       Int
  reps       String // JSON array to handle different reps per set: "[12, 10, 8]"
  weight     Float? // Weight in kg
  restTime   Int? // Rest time in seconds
  notes      String?
  group      String? // Exercise group for notation (A, B, C, etc.)
  order      Int // Order of exercise within group
  createdAt  DateTime @default(now())

  workout  Workout?         @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  template WorkoutTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  exercise Exercise         @relation(fields: [exerciseId], references: [id])

  @@unique([workoutId, exerciseId, order])
  @@unique([templateId, exerciseId, order])
}

model WorkoutTemplate {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  exercises   WorkoutExercise[]
  tags        WorkoutTemplateTag[]
}

model WorkoutTag {
  id          String               @id @default(cuid())
  name        String               @unique
  slug        String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  templates   WorkoutTemplateTag[]
}

model WorkoutTemplateTag {
  templateId String
  tagId      String
  assignedAt DateTime    @default(now())

  template WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tag      WorkoutTag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([templateId, tagId])
}
